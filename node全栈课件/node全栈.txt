MEANR (MongoDB, Express, AngularJS, Node.js, Redis) stack with Chef for DevOps and Capistrano for Deployment

全栈开发的不同之处

开发环境也可以不用mock，直接提供后端server服务，这也是全栈开发和之前前端开发的不同之处。 可以把node后端当成中间层，请求旧后端并包装后返回。

MENV (Mongo, Express, Node, VueJS), Easily build full stack javascript web


MENU
Home
SUBSCRIBE
MENU
顺顺的前端技术分享
15 APRIL 2016
顺顺有非常多的项目，前端的所使用的技术架构也是多样的。

agenda:

架构篇
前端MVC
后端MVC
前后混合MVC
预处理语言
构建篇
前端库
其他
前端MVC：
现在流行一个名字，即网站软件或者web app，软件的特点是：实时，体验佳，复杂。于是就诞生了前端MVC，前端MVC通过在浏览器端进行路由分发，不同路由对应不同的功能，甚至可以细致到某个功能内部的一个点，前端MVC的好处是，路由切换没有卡顿感，无刷新，模版文件在网站加载时就已经下载完毕，因此页面切换速度飞快。顺顺主要用了angularjs和reactjs。由于页面不再由服务器端吐出，前端与后端交互使用json数据，我们的数据接口符合RESTful规范。

使用到的项目有：CRP（顾问，学生协同工作软件），BI（内部的数据分析软件），YM（移民顾问端软件）等

后端MVC
所有的行业都脱离不了网络推广这个环节，这个环节最重要的是：SEO 
前端MVC由于是在浏览器端渲染时才呈现数据，因此没法满足SEO的需求。解决这个问题的方法就是使用传统的后端MVC方式。在这里，顺顺与传统的方式也有区别，我们会用php或者nodejs做一个中间层，这个中间层只负责路由分发与数据渲染，数据由API后台提供。

难点：路由分发（正则匹配，nginx转发），页面性能（cache-control，etag，redis缓存接口，页面静态化，cdn），兼容性（设计规避，兼容性代码，切图切图切图）

使用到的项目有：官网，留学网，SEM页面

前后混合MVC
前端MVC的弊端是：

当业务逻辑很复杂的时候，会导致页面太重，性能变差
js，css文件过大，流量增大。例如：当用户只想简单的查看一下个人信息，却加载了视频播放，富文本编辑，图标插件的代码。
解决这些问题的方法是，在原有前端MVC基础上，在增加后端路由，将比较对立的模块从后端拆分好路由，每个模块内部的页面跳转使用前端MVC。

使用到的项目有：统一登录

统一登录的登录，注册路由都是用后台直接分发，因为这些页面比较简单，并且对性能要求极高，大部分使用场景是打开登录界面后，登录成功就跳转到对应的系统中，因此，没有必要把其他模块的代码加载进俩，并且，登录的使用场景有可能是地铁中等网络条件较差的地方，所以减少整个响应的大小很有必要。

预处理语言
预处理语言是为了弥补现有js或者css的不足，预处理语言必须处理过后才能被浏览器正确理解，处理过程可以在浏览器端，也可以在网站发布前。 反例：coffeescript 预处理语言的选择一定要随大流，简单，与现有的语言差异较小，并且有前途。coffeescript的弊端是语法使用缩进来区分代码块，个人开发者维护。之前BI代码使用的coffeescript

目前我们使用的是： 
es6，它的好处是：兼容现有es5语法，是下一代标准，尽管目前没普及，但是总有一天会普及，学习它不会亏

less，scss：都是css的预处理语言，bootstrap 3是用less写的，4是用scss写的，语法比较相似，兼容纯css，嵌套与变量的思想也符合css 4。sass与scss的区别：前者用缩进来区分块，本质一样

构建篇
构建包括：依赖管理，js，css注入，js，css代码最小化，合并，js代码混淆，图片压缩，全局变量替换，cdn替换，assets版本号，自动测试，自动部署。 
使用的工具：yoeman，gulp，grunt，webpack，bower，npm，github hook，script(不局限于nodejs)

# 替换文件内的字符串
find . -type f -exec perl -i -p -e 's###' {} \;  
# 批量转化图片
for i in $(ls *.jpg); do convert $i -strip -resize 750 converted/$i; done  
# 批量重命名文件
for x in *; do y=$(echo $x | sed -e 's/^discussion/forum/'); mv $x $y; done  
前端库
angularjs: 入门容易，功能强大，适合做交互逻辑复杂的app 
reactjs: 轻量级，高大上，适合做小而美的app 
jquery: 可能是最好的前端库，不多说了 
lodash/underscore: 常用的array操作，utilities 
momentjs: 时间处理库，库比较大，如果在前端使用，请勿引用整个库 
highchartjs: 图表插件，各种图表 
qs: 用来解析或者拼装query string，很多项目都自己写一个拼装方法，或者直接手动拼装，bug百出，费时间 
font-awesome: 字体图标库，比较庞大，项目中应该自己制作字体。 
bootstrap: 样式库，ui插件库 
restangular: angularjs下的ajax库

其他
apiary.io 在线编辑api文档，文档写好，mock api和api测试也对应生成了。
http://www.iconfont.cn/ 阿里妈妈，搜索图标，在线生成字体，请勿使用在线生成字体的功能，无法进行很好的代码管理。
测试：web app如同软件一样，需要进行编写测试代码，目前还没有项目大规模开始施行，之后哪位前端推行这个立刻performance++，个人比较推荐mocha，统一登录中使用mocha+babel 可以直接测试es6代码。
git workflow：目前，由于大部分项目开发人员只有1-2个，有的人会觉得没有必要，这个是误区，就算一个人也应该执行git workflow，可以保障代码安全，feature bug分离，为后人造福。具体如下：master为在线分支，develop为主开发分支，feature开发应该从develop切分支出去进行开发，紧急bug修复从master切，一般bug修复从develop切，只有测试通过的feature才合并到develop分支，发布的时候从develop切一个发布分支，上与发布环境。不影响其他开发。发布成功后，需要把预发布分支合并到master与develop分支上。所有合并都发pr。
cagegong
Read more posts by this author.

分享本文
   
Docker学习笔记1
由于一直在折腾服务器，每次折腾都要安装redis，mongo，nodejs，nginx，ss，pptpd，非常耗时。于是便开始学习Docker。 Docker初体验 原本更换服务器需要配置一天，而且不同厂家的vps还会有差异，需要单独去寻找解决方案。这次偶然发现scaleway家的vps，只需要2.99欧一个月，4核CPU，2G RAM，…
微信页面开发的那些坑
做一个微信站。简单的几个功能，在ios的微信中体验甚好，然后到了安卓微信中，目不忍视。现在就来细数微信开发中那些坑。 1. ios端微信不支持js设置页面title 在ios下。title在页面刚加载的时候就已经确定了。在页面js中 document.title='title' 并不能解决问题。 解决方案如下： es 6 版…
TheTechGuys ? 2017Proudly published with Ghost

------、
、全栈的最后一公里
全栈这个词很敏感，有人不认同有人无所谓，对我而言，它就像是一个 H5 工程师一样，只是表述了一种印象或者概念，具体严谨与否不重要，因为跟人沟通，心领神会即可不必强究细节。
那么在学习 Nodejs 的过程中，有一道门槛是无论如何也逃不过去的，那就是 服务器的选购配置，域名的解析指向，Nodejs 项目的部署等这些偏运维方向，这些让很多新人甚至是已经工作的工程师困扰，自己去琢磨太花费时间，不去琢磨，始终没有能力凭自己双手，让一个产品上线或者让自己的一个想法实现到互联网上，不论是成为独立站长，还是只是让朋友同学访问，于是我把这些总结了一下，以以上几个项目为例，大概分为如下几个步骤：
部署方案规划
待部署项目分析
选购及备案域名
厂商对比与选配阿里云服务器
初步 SSH 无密码登录连接和配置
搭建 Nodejs/MongoDB/Nginx 环境
配置 IPTables/Fail2Ban 防火墙及主动防御
域名 DNS 转移及 A 记录/CNAME 解析配置
MongoDB 角色配置与安全规则设置
线上 MongoDB 单表单库导入导出与跨机迁移备份上传
PM2 发布环境配置
服务器与 Git 仓库读写配置
PM2 一键部署线上 Nodejs 项目
电影网站/ReactNative App 后台/微信公众号/微信小程序后台等项目实战部署
SSL 证书申请及 Nginx 证书集成提供 HTTPS 协议
上线方案复盘总结
这个新课程 全栈最后一公里 - Node.js项目的线上服务器部署与发布 已经在 4 月 10 日上线，感兴趣的同学们可以关注一下。

作者： Scott 
链接：http://www.imooc.com/article/17554


一、Node.js简介 

      原本javascript纯粹是一个前端语言，干的基本上是让网页更丰富更炫的事情。不过Node.js出现后，javacript成为了前后端通吃的语言。比如网易的pomelo就是基于Node.js的游戏服务器引擎，全世界很多大公司也都开始使用Node.js构建他们的服务器后端。

      Node.js有这么几个特点：

      1、基于javacript语言，群众基础非常扎实，github上面70%的库都是javacript写的，那些star过万的库，也几乎清一色的javascript

      2、基于google的V8 javascript解释引擎，速度非常快，作为服务器语言，可以不是最快的，但是一定不能是慢的

      3、异步+回调的操作，使得Node.js的服务器的并发数目非常高

      4、npm和社区庞大，Node.js的第三方库多到无法想象
来源：慕课网
本文原创发布于慕课网 ，转载请注明出处，谢谢合作！




#### 架构模式特点：
* 易于协作开发
* 方便拓展与维护
* 结构清晰明了
* 灵活，可自定义配置


> 基于这个模式，可以拓展更为强大的功能，诸如类似其他后台模板里面的那些功能等，都可以用组件化形式开发，注入到此项目。



### 涵盖技术包含

#### 技术点：
* [Vue](http://cn.vuejs.org/) 当下最流行的前端JavaScript框架
* [VueRouter](https://router.vuejs.org/zh-cn/) 基于Vue的路由插件
* [Vuex](https://vuex.vuejs.org/zh-cn/) 管理Vue中多组件共享状态的插件，类似react的redux
* [Axios](https://github.com/mzabriskie/axios) 当前最流行的一个http库
* [ElementUI](https://github.com/ElemeFE/element) 饿了么团队开发的基于Vue的一套UI组件库

#### 富文本：
* [wangEditor](http://www.wangeditor.com/) 一款国人开发的富文本编辑器

#### 七牛云：
* [七牛云开发文档](https://developer.qiniu.com/) 官方开发者文档
* [七牛JavaScript版SDK](https://developer.qiniu.com/kodo/sdk/1283/javascript) Web端JavaScript版SDK文档
* [七牛PHP版SDK](https://developer.qiniu.com/kodo/sdk/1241/php) 服务端PHP版SDK文档


构建单页Web应用

单页应用是什么？

让我们先来看几个网站：

coding

teambition

cloud9

注意这几个网站的相同点，那就是在浏览器中，做了原先“应当”在客户端做的事情。它们的界面切换非常流畅，响应很迅速，跟传统的网页明显不一样，它们是什么呢？这就是单页Web应用。

所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。

其实单页应用我们并不陌生，很多人写过ExtJS的项目，用它实现的系统，很天然的就已经是单页的了，也有人用jQuery或者其他框架实现过类似的东西。用各种JS框架，甚至不用框架，都是可以实现单页应用的，它只是一种理念。有些框架适用于开发这种系统，如果使用它们，可以得到很多便利。

开发框架

ExtJS可以称为第一代单页应用框架的典型，它封装了各种UI组件，用户主要使用JavaScript来完成整个前端部分，甚至包括布局。随着功能逐渐增加，ExtJS的体积也逐渐增大，即使用于内部系统的开发，有时候也显得笨重了，更不用说开发以上这类运行在互联网上的系统。

jQuery由于偏重DOM操作，它的插件体系又比较松散，所以比ExtJS这个体系更适合开发在公网运行的单页系统，整个解决方案会相对比较轻量、灵活。

但由于jQuery主要面向上层操作，它对代码的组织是缺乏约束的。如何在代码急剧膨胀的情况下控制每个模块的内聚性，并且适当在模块之间产生数据传递与共享，就成为了一种有挑战的事情。

为了解决单页应用规模增大时候的代码逻辑问题，出现了不少MV*框架，他们的基本思路都是在JS层创建模块分层和通信机制。有的是MVC，有的是MVP，有的是MVVM，而且，它们几乎都在这些模式上产生了变异，以适应前端开发的特点。

这类框架包括Backbone，Knockout，AngularJS，Avalon等。

组件化

这些在前端做分层的框架推动了代码的组件化，所谓组件化，在传统的Web产品中，更多的指UI组件，但其实组件是一个广泛概念，传统Web产品中UI组件占比高的原因是它的厚度不足，随着客户端代码比例的增加，相当一部分的业务逻辑也前端化，由此催生了很多非界面型组件的出现。

分层带来的一个优势是，每层的职责更专一了，由此，可以对其作单元测试的覆盖，以保证其质量。传统UI层测试最头疼的问题是UI层和逻辑混杂在一起，比如往往会在远程请求的回调中更改DOM，当引入分层之后，这些东西都可以分别被测试，然后再通过场景测试来保证整体流程。

代码隔离

与开发传统页面型网站相比，实现单页应用的过程中，有一些比较值得特别关注的点。

从单页应用的特点来看，它比页面型网站更加依赖于JavaScript，而由于页面的单页化，各种子功能的JavaScript代码聚集到了同一个作用域，所以代码的隔离、模块化变得很重要。

在单页应用中，页面模板的使用是很普遍的。很多框架内置了特定的模板，也有的框架需要引入第三方的模板。这种模板是界面片段，我们可以把它们类比成JavaScript模块，它们是另一种类型的组件。

模板也一样有隔离的需要。不隔离模板，会造成什么问题呢？模板间的冲突主要存在于id属性上，如果一个模板中包含固定的id，当它被批量渲染的时候，会造成同一个页面的作用域中出现多个相同id的元素，产生不可预测的后果。因此，我们需要在模板中避免使用id，如果有对DOM的访问需求，应当通过其他选择器来完成。如果一个单页应用的组件化程度非常高，很可能整个应用中都没有元素id的使用。

代码合并与加载策略

人们对于单页系统的加载时间容忍度与Web页面不同，如果说他们愿意为购物页面的加载等待3秒，有可能会愿意为单页应用的首次加载等待5-10秒，但在此之后，各种功能的使用应当都比较流畅，所有子功能页面尽量要在1-2秒时间内切换成功，否则他们就会感觉这个系统很慢。

从这些特点来看，我们可以把更多的公共功能放到首次加载，以减小每次加载的载入量，有一些站点甚至把所有的界面和逻辑全部放到首页加载，每次业务界面切换的时候，只产生数据请求，因此它的响应是非常迅速的，比如青云的控制台就是这么做的。

通常在单页应用中，无需像网站型产品一样，为了防止文件加载阻塞渲染，把js放到html后面加载，因为它的界面基本都是动态生成的。

当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中，后者在切换功能的时候速度有优势，但是加重了主页面的负担。

在传统的页面型网站中，页面之间是互相隔离的，因此，如果在页面间存在可复用的代码，一般是提取成单独的文件，并且可能会需要按照每个页面的需求去进行合并。单页应用中，如果总的代码量不大，可以整体打包一次在首页载入，如果大到一定规模，再作运行时加载，加载的粒度可以搞得比较大，不同的块之间没有重复部分。

路由与状态的管理

我们最开始看到的几个在线应用，有的是对路由作了管理的，有的没有。

管理路由的目的是什么呢？是为了能减少用户的导航成本。比如说我们有一个功能，经历过多次导航菜单的点击，才呈现出来。如果用户想要把这个功能地址分享给别人，他怎么才能做到呢？

传统的页面型产品是不存在这个问题的，因为它就是以页面为单位的，也有的时候，服务端路由处理了这一切。但是在单页应用中，这成为了问题，因为我们只有一个页面，界面上的各种功能区块是动态生成的。所以我们要通过对路由的管理，来实现这样的功能。

具体的做法就是把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配。

有了路由之后，我们的单页面产品就可以前进后退，就像是在不同页面之间一样。

其实在Web产品之外，早就有了管理路由的技术方案，Adobe Flex中，就会把比如TabNavigator，甚至下拉框的选中状态对应到url上，因为它也是单“页面”的产品模式，需要面对同样的问题。

当产品状态复杂到一定程度的时候，路由又变得很难应用了，因为状态的管理极其麻烦，比如开始的时候我们演示的c9.io在线IDE，它就没法把状态对应到url上。

缓存与本地存储

在单页应用的运作机制中，缓存是一个很重要的环节。

由于这类系统的前端部分几乎全是静态文件，所以它能够有机会利用浏览器的缓存机制，而比如动态加载的界面模板，也完全可以做一些自定义的缓存机制，在非首次的请求中直接取缓存的版本，以加快加载速度。

甚至，也出现了一些方案，在动态加载JavaScript代码的同时，把它们也缓存起来。比如Addy Osmani的这个basket.js，就利用了HTML5 localStorage作了js和css文件的缓存。

在单页产品中，业务代码也常常会需要跟本地存储打交道，存储一些临时数据，可以使用localStorage或者localStorageDB来简化自己的业务代码。

服务端通信

传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。

WebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。

由于WebSocket只在比较先进的浏览器上被支持，有一些库提供了在不同浏览器中的兼容方案，比如socket.io，它在不支持WebSocket的浏览器上会降级成使用AJAX或JSONP等方式，对业务代码完全透明、兼容。

内存管理

传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。

样式的规划

在单页应用中，因为页面的集成度高，所有页面聚集到同一作用域，样式的规划也变得重要了。

样式规划主要是几个方面：

基准样式的分离

这里面主要包括浏览器样式的重设、全局字体的设置、布局的基本约定和响应式支持。

组件样式的划分

这里面是两个层面的规划，首先是各种界面组件及其子元素的样式，其次是一些修饰样式。组件样式应当尽量减少互相依赖，各组件的样式允许冗余。

堆叠次序的管理

传统Web页面的特点是元素多，但是层次少，单页应用会有些不同。

在单页应用中，需要提前为各种UI组件规划堆叠次序，也就是z-index，比如说，我们可能会有各种弹出对话框，浮动层，它们可能组合成各种堆叠状态。新的对话框的z-index需要比旧的高，才能确保盖在它上面。诸如此类，都需要我们对这些可能的遮盖作规划，那么，怎样去规划呢？

了解通信知识的人，应当会知道，不同的频率段被划分给不同的通信方式使用，在一些国家，领空的使用也是有划分的，我们也可以用同样的方式来预先分段，不同类型的组件的z-index落到各自的区间，以避免它们的冲突。

单页应用的产品形态

我们在开始的时候提到，存在着很多新型Web产品，使用单页应用的方式构建，但实际上，这类产品不仅仅存在于Web上。点开Chrome商店，我们会发现很多离线应用，这些产品都可以算是单页应用的体现。

除了各种浏览器插件，借助node-webkit这样的外壳平台，我们可以使用Web技术来构建本地应用，产品的主要部分仍然是我们熟悉的单页应用。

单页应用的流行程度正在逐渐增加，大家如果关注了一些初创型互联网企业，会发现其中很大一部分的产品模式是单页化的。这种模式能带给用户流畅的体验，在开发阶段，对JavaScript技能水平要求较高。

单页应用开发过程中，前后端是天然分离的，双方以API为分界。前端作为服务的消费者，后端作为服务的提供者。在此模式下，前端将会推动后端的服务化。当后端不再承担模板渲染、输出页面这样工作的情况下，它可以更专注于所提供的API的实现，而在这样的情况下，Web前端与各种移动终端的地位对等，也逐渐使得后端API不必再为每个端作差异化设计了。

部署模式的改变

在现在这个时代，我们已经可以看到一种产品的出现了，那就是“无后端”的Web应用。这是一种什么东西呢？基于这种理念，你的产品很可能只需要自己编写静态Web页面，在某种BaaS（Backend as a Service）云平台上定制服务端API和云存储，集成这个平台提供的SDK，通过AJAX等方式与之打交道，实现注册认证、社交、消息推送、实时通信、云存储等功能。

我们观察一下这种模式，会发现前后端的部署已经完全分离了，前端代码完全静态化，这意味着可以把它们放置到CDN上，访问将大大地加速，而服务端托管在BaaS云上，开发者也不必去关注一些部署方面的繁琐细节。

假设你是一名创业者，正在做的是一种实时协同的单页产品，可以在云平台上，快速定制后端服务，把绝大部分宝贵的时间花在开发产品本身上。

单页应用的缺陷

单页应用最根本的缺陷就是不利于SEO，因为界面的绝大部分都是动态生成的，所以搜索引擎很不容易索引它。

产品单页化带来的挑战

一个产品想要单页化，首先是它必须适合单页的形态。其次，在这个过程中，对开发模式会产生一些变更，对开发技能也会有一些要求。

开发者的JavaScript技能必须过关，同时需要对组件化、设计模式有所认识，他所面对的不再是一个简单的页面，而是一个运行在浏览器环境中的桌面软件。